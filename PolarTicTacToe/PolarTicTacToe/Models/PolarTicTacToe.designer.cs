#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolarTicTacToe.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="650606_apidocumentations")]
	public partial class PolarTicTacToeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    #endregion
		
		public PolarTicTacToeDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["_650606_apidocumentationsConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PolarTicTacToeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PolarTicTacToeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PolarTicTacToeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PolarTicTacToeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ChallengerID;
		
		private System.Nullable<int> _OpponentID;
		
		private string _Moves;
		
		private System.Nullable<int> _WinnerID;
		
		private string _GameState;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<long> _CurAppRequest;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Player> _Player1;
		
		private EntityRef<Player> _Player2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnChallengerIDChanging(int value);
    partial void OnChallengerIDChanged();
    partial void OnOpponentIDChanging(System.Nullable<int> value);
    partial void OnOpponentIDChanged();
    partial void OnMovesChanging(string value);
    partial void OnMovesChanged();
    partial void OnWinnerIDChanging(System.Nullable<int> value);
    partial void OnWinnerIDChanged();
    partial void OnGameStateChanging(string value);
    partial void OnGameStateChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnCurAppRequestChanging(System.Nullable<long> value);
    partial void OnCurAppRequestChanged();
    #endregion
		
		public Game()
		{
			this._Player = default(EntityRef<Player>);
			this._Player1 = default(EntityRef<Player>);
			this._Player2 = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChallengerID", DbType="Int NOT NULL")]
		public int ChallengerID
		{
			get
			{
				return this._ChallengerID;
			}
			set
			{
				if ((this._ChallengerID != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChallengerIDChanging(value);
					this.SendPropertyChanging();
					this._ChallengerID = value;
					this.SendPropertyChanged("ChallengerID");
					this.OnChallengerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpponentID", DbType="Int")]
		public System.Nullable<int> OpponentID
		{
			get
			{
				return this._OpponentID;
			}
			set
			{
				if ((this._OpponentID != value))
				{
					if (this._Player1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOpponentIDChanging(value);
					this.SendPropertyChanging();
					this._OpponentID = value;
					this.SendPropertyChanged("OpponentID");
					this.OnOpponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Moves", DbType="VarChar(MAX)")]
		public string Moves
		{
			get
			{
				return this._Moves;
			}
			set
			{
				if ((this._Moves != value))
				{
					this.OnMovesChanging(value);
					this.SendPropertyChanging();
					this._Moves = value;
					this.SendPropertyChanged("Moves");
					this.OnMovesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerID", DbType="Int")]
		public System.Nullable<int> WinnerID
		{
			get
			{
				return this._WinnerID;
			}
			set
			{
				if ((this._WinnerID != value))
				{
					if (this._Player2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWinnerIDChanging(value);
					this.SendPropertyChanging();
					this._WinnerID = value;
					this.SendPropertyChanged("WinnerID");
					this.OnWinnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameState", DbType="VarChar(50)")]
		public string GameState
		{
			get
			{
				return this._GameState;
			}
			set
			{
				if ((this._GameState != value))
				{
					this.OnGameStateChanging(value);
					this.SendPropertyChanging();
					this._GameState = value;
					this.SendPropertyChanged("GameState");
					this.OnGameStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurAppRequest", DbType="BigInt")]
		public System.Nullable<long> CurAppRequest
		{
			get
			{
				return this._CurAppRequest;
			}
			set
			{
				if ((this._CurAppRequest != value))
				{
					this.OnCurAppRequestChanging(value);
					this.SendPropertyChanging();
					this._CurAppRequest = value;
					this.SendPropertyChanged("CurAppRequest");
					this.OnCurAppRequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Player", ThisKey="ChallengerID", OtherKey="ID", IsForeignKey=true)]
		public Player Challenger
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._ChallengerID = value.ID;
					}
					else
					{
						this._ChallengerID = default(int);
					}
					this.SendPropertyChanged("Challenger");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game1", Storage="_Player1", ThisKey="OpponentID", OtherKey="ID", IsForeignKey=true)]
		public Player Opponent
		{
			get
			{
				return this._Player1.Entity;
			}
			set
			{
				Player previousValue = this._Player1.Entity;
				if (((previousValue != value) 
							|| (this._Player1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player1.Entity = null;
						previousValue.Games1.Remove(this);
					}
					this._Player1.Entity = value;
					if ((value != null))
					{
						value.Games1.Add(this);
						this._OpponentID = value.ID;
					}
					else
					{
						this._OpponentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Opponent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game2", Storage="_Player2", ThisKey="WinnerID", OtherKey="ID", IsForeignKey=true)]
		public Player Winner
		{
			get
			{
				return this._Player2.Entity;
			}
			set
			{
				Player previousValue = this._Player2.Entity;
				if (((previousValue != value) 
							|| (this._Player2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player2.Entity = null;
						previousValue.Games2.Remove(this);
					}
					this._Player2.Entity = value;
					if ((value != null))
					{
						value.Games2.Add(this);
						this._WinnerID = value.ID;
					}
					else
					{
						this._WinnerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Winner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<long> _FacebookID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<Game> _Games1;
		
		private EntitySet<Game> _Games2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFacebookIDChanging(System.Nullable<long> value);
    partial void OnFacebookIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Player()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Games1 = new EntitySet<Game>(new Action<Game>(this.attach_Games1), new Action<Game>(this.detach_Games1));
			this._Games2 = new EntitySet<Game>(new Action<Game>(this.attach_Games2), new Action<Game>(this.detach_Games2));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookID", DbType="BigInt")]
		public System.Nullable<long> FacebookID
		{
			get
			{
				return this._FacebookID;
			}
			set
			{
				if ((this._FacebookID != value))
				{
					this.OnFacebookIDChanging(value);
					this.SendPropertyChanging();
					this._FacebookID = value;
					this.SendPropertyChanged("FacebookID");
					this.OnFacebookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Games", ThisKey="ID", OtherKey="ChallengerID")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game1", Storage="_Games1", ThisKey="ID", OtherKey="OpponentID")]
		public EntitySet<Game> Games1
		{
			get
			{
				return this._Games1;
			}
			set
			{
				this._Games1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game2", Storage="_Games2", ThisKey="ID", OtherKey="WinnerID")]
		public EntitySet<Game> Games2
		{
			get
			{
				return this._Games2;
			}
			set
			{
				this._Games2.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Challenger = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Challenger = null;
		}
		
		private void attach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = this;
		}
		
		private void detach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.Opponent = null;
		}
		
		private void attach_Games2(Game entity)
		{
			this.SendPropertyChanging();
			entity.Winner = this;
		}
		
		private void detach_Games2(Game entity)
		{
			this.SendPropertyChanging();
			entity.Winner = null;
		}
	}
}
#pragma warning restore 1591
